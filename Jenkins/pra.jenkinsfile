pipeline
{
    agent
    {
        node
        {
            label '5G-SC'
        }
    }
	options{
		timeout(time: 15, unit: 'MINUTES')
		timestamps()
	}
    parameters
    {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Name of branch where Git commit is merged')
        string(name: 'RELEASE_CANDIDATE', description: 'The helm chart release candidate version (e.g. 1.0.0-7)')
        choice(name: 'VERSION_UPDATE', choices: ['MINOR', 'PATCH', 'MAJOR'], description: 'Type of release version update (e.g. MAJOR, MINOR, PATCH)')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Enable dry-run')
        string(name: 'COMMITTER_EMAIL', description: 'Email of the committer to be used for VERSION_PREFIX update')
    }
    stages {
        stage('Prepare') {
            steps {
                checkout([$class: 'GitSCM',
                                  branches: [
                                             [name: '${BRANCH}']
                                            ],
                                  doGenerateSubmoduleConfigurations: false,
                                  extensions: [
                                               [$class: 'CleanBeforeCheckout'],
                                               [$class: 'WipeWorkspace'],
                                               [$class: 'SubmoduleOption',
                                                            disableSubmodules: false,
                                                            parentCredentials: true,
                                                            recursiveSubmodules: true,
                                                            reference: '',
                                                            trackingSubmodules: false]
                                              ],
                                  submoduleCfg: [],
                                  userRemoteConfigs: [
                                                [url: 'ssh://eiffelesc@gerritmirror-direct.sero.gic.ericsson.se:29418/MC_5G/hc_agent']
                                                ]
                         ])
            }
        }
        stage('Cleanup')
        {
            steps
            {
               sh 'bob/bob -r ruleset2.0.pra.yaml clean'
            }
        }
        stage('Init')
        {
            steps
            {
               sh 'bob/bob -r ruleset2.0.pra.yaml init'
               archiveArtifacts 'artifact.properties'
               script{
                    // set displayed build name to "BUILD_NUMBER - VERSION"
                    currentBuild.displayName = "#${BUILD_NUMBER}, ";
                    currentBuild.displayName += readFile ".bob/var.released-version";
                    // set displayed description to "NODE_NAME, VERSION"
                    currentBuild.description = "${env.NODE_NAME}, ${env.GERRIT_CHANGE_OWNER_NAME}, ";
                    currentBuild.description += readFile ".bob/var.semver"
                } //script
            }
        }
        stage('Publish released Docker Images') {
            when { expression { env.DRY_RUN == "false" }}
            steps
            {
                // Push docker images to -released docker repository
                sh './bob/bob -r ruleset2.0.pra.yaml publish-released-docker-image'
            }
        }
        stage('Publish released helm chart') {
            steps
            {
              withCredentials([
                               usernamePassword(credentialsId: 'eiffelesc-armsero-token-credentials', usernameVariable: 'RELEASED_ARTIFACTS_USER', passwordVariable: 'RELEASED_ARTIFACTS_REPO_API_TOKEN'),
                               usernamePassword(credentialsId: 'eiffelesc-armsero-token-credentials', usernameVariable: 'HELM_USER', passwordVariable: 'HELM_TOKEN'),
                               usernamePassword(credentialsId: 'eiffelesc-credentials', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')
                              ])
                {
                    // Repackage and Upload helm chart to -released helm chart repository
                    sh './bob/bob -r ruleset2.0.pra.yaml publish-released-helm-chart'
                }
            }
        }
        stage('Create PRA Git Tag')
        {
            steps
            {
               withCredentials([usernamePassword(credentialsId: 'eiffelesc-credentials', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')])
               {
                    // Create git tag 'v<released version>'
                    sh 'bob/bob -r ruleset2.0.pra.yaml create-pra-git-tag'
               }
            }
        }
        stage('Increment version prefix')
        {
            steps
            {
               withCredentials([usernamePassword(credentialsId: 'eiffelesc-credentials', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')])
               {
                  // Step minor version in VERSION_PREFIX (e.g. 1.1.0 -> 1.2.0)
                  sh 'bob/bob -r ruleset2.0.pra.yaml increment-version-prefix'
               }
            }
        }
        stage('Send Release Email')
        {
            steps {
                script {
                    //def exists = fileExists 'build/pri/pra_release_email.html'
                    //if (exists) {
                        //message = readFile('build/pri/pra_release_email.html')
                        message = "HCAgent PRA announcement"
                        VERSION = sh(returnStdout: true, script: 'cat .bob/var.semver').trim()
                        SERVICE_NAME = sh(returnStdout: true, script: 'cat .bob/var.service-name').trim()
                        mail body: message, subject:"$SERVICE_NAME 2.0 - $VERSION, PRA Release", to: 'IXG-ChallengersTeam@ericsson.onmicrosoft.com', mimeType: 'text/html'
                    //} else {
                        //echo 'No release contents found for notifying. Email sending aborted...'
                    //}
                }
            }
        }
        /* This stage is executed just for housekeeping to remove the image artifacts from the slave */
        stage('Final Cleanup')
        {
            steps {
               sh 'bob/bob -r ruleset2.0.pra.yaml clean'
            }
        }
    }
    post {
        always {
            sh './bob/bob -r ruleset2.0.pra.yaml cleanup-images'
        }
        failure {
            mail to: "${env.EMAIL_COMMITTER}",
            subject: "Failed HCAgent PRA Pipeline: ${currentBuild.fullDisplayName}",
            body: "Failure on ${env.BUILD_URL}"
        }
    }
}